/*
 * Zapier Embed API
 * The Zapier Embed API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@zapier.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActionsListAvailableActionsdefaultResponse;
import com.konfigthis.client.model.AppsListPopularResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listPopularCall(Integer limit, Integer offset, String category, String query, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPopularValidateBeforeCall(Integer limit, Integer offset, String category, String query, String ids, final ApiCallback _callback) throws ApiException {
        return listPopularCall(limit, offset, category, query, ids, _callback);

    }


    private ApiResponse<AppsListPopularResponse> listPopularWithHttpInfo(Integer limit, Integer offset, String category, String query, String ids) throws ApiException {
        okhttp3.Call localVarCall = listPopularValidateBeforeCall(limit, offset, category, query, ids, null);
        Type localVarReturnType = new TypeToken<AppsListPopularResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPopularAsync(Integer limit, Integer offset, String category, String query, String ids, final ApiCallback<AppsListPopularResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPopularValidateBeforeCall(limit, offset, category, query, ids, _callback);
        Type localVarReturnType = new TypeToken<AppsListPopularResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPopularRequestBuilder {
        private Integer limit;
        private Integer offset;
        private String category;
        private String query;
        private String ids;

        private ListPopularRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Used for paginating results. Specifies the amount of apps to return. (optional)
         * @return ListPopularRequestBuilder
         */
        public ListPopularRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for paginating results. Specifies the offset of the apps to return. (optional)
         * @return ListPopularRequestBuilder
         */
        public ListPopularRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set category
         * @param category Categories that apps must have in order to be returned in the response. E.g. Accounting (&#x60;accounting&#x60;), AI Tools (&#x60;ai-tools&#x60;), and All (&#x60;all&#x60;). The full list of valid categories can be retrieved using the &#x60;category&#x60; endpoint, detailed [here](https://platform.zapier.com/embed/partner-api#get-v1categories). (optional)
         * @return ListPopularRequestBuilder
         */
        public ListPopularRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set query
         * @param query Parameter to limit the results to apps whose titles match the provided query. (optional)
         * @return ListPopularRequestBuilder
         */
        public ListPopularRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set ids
         * @param ids Parameter to restrict the results to apps whose ID matches those in the provided comma-separated value. Cannot be combined with &#x60;category&#x60;. (optional)
         * @return ListPopularRequestBuilder
         */
        public ListPopularRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for listPopular
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPopularCall(limit, offset, category, query, ids, _callback);
        }


        /**
         * Execute listPopular request
         * @return AppsListPopularResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public AppsListPopularResponse execute() throws ApiException {
            ApiResponse<AppsListPopularResponse> localVarResp = listPopularWithHttpInfo(limit, offset, category, query, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPopular request with HTTP info returned
         * @return ApiResponse&lt;AppsListPopularResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppsListPopularResponse> executeWithHttpInfo() throws ApiException {
            return listPopularWithHttpInfo(limit, offset, category, query, ids);
        }

        /**
         * Execute listPopular request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsListPopularResponse> _callback) throws ApiException {
            return listPopularAsync(limit, offset, category, query, ids, _callback);
        }
    }

    /**
     * Get Apps
     * This endpoint returns a list of popular apps.  Keep in mind that Zapier built-in apps will not be returned and the order of the result is by app popularity.  This endpoint requires the &#x60;zap&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @return ListPopularRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public ListPopularRequestBuilder listPopular() throws IllegalArgumentException {
        return new ListPopularRequestBuilder();
    }
}
