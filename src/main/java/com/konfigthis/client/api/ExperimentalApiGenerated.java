/*
 * Zapier Embed API
 * The Zapier Embed API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@zapier.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExperimentalGetZapRunsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExperimentalApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExperimentalApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExperimentalApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getZapRunsCall(String fromDate, String toDate, String zapId, Integer limit, Integer offset, String search, String statuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zap-runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_date", toDate));
        }

        if (zapId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zap_id", zapId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZapRunsValidateBeforeCall(String fromDate, String toDate, String zapId, Integer limit, Integer offset, String search, String statuses, final ApiCallback _callback) throws ApiException {
        return getZapRunsCall(fromDate, toDate, zapId, limit, offset, search, statuses, _callback);

    }


    private ApiResponse<ExperimentalGetZapRunsResponse> getZapRunsWithHttpInfo(String fromDate, String toDate, String zapId, Integer limit, Integer offset, String search, String statuses) throws ApiException {
        okhttp3.Call localVarCall = getZapRunsValidateBeforeCall(fromDate, toDate, zapId, limit, offset, search, statuses, null);
        Type localVarReturnType = new TypeToken<ExperimentalGetZapRunsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getZapRunsAsync(String fromDate, String toDate, String zapId, Integer limit, Integer offset, String search, String statuses, final ApiCallback<ExperimentalGetZapRunsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZapRunsValidateBeforeCall(fromDate, toDate, zapId, limit, offset, search, statuses, _callback);
        Type localVarReturnType = new TypeToken<ExperimentalGetZapRunsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetZapRunsRequestBuilder {
        private String fromDate;
        private String toDate;
        private String zapId;
        private Integer limit;
        private Integer offset;
        private String search;
        private String statuses;

        private GetZapRunsRequestBuilder() {
        }

        /**
         * Set fromDate
         * @param fromDate Find Zap runs equal to or newer than this date. If not provided, results default to last 30 days&#39; Zap Runs. (optional)
         * @return GetZapRunsRequestBuilder
         */
        public GetZapRunsRequestBuilder fromDate(String fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set toDate
         * @param toDate Find Zap runs less than this date. (optional)
         * @return GetZapRunsRequestBuilder
         */
        public GetZapRunsRequestBuilder toDate(String toDate) {
            this.toDate = toDate;
            return this;
        }
        
        /**
         * Set zapId
         * @param zapId Find Zap runs for the specified Zap ID. (optional)
         * @return GetZapRunsRequestBuilder
         */
        public GetZapRunsRequestBuilder zapId(String zapId) {
            this.zapId = zapId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of returned Zap Runs. (optional)
         * @return GetZapRunsRequestBuilder
         */
        public GetZapRunsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Number of Zap Runs to skip. (optional)
         * @return GetZapRunsRequestBuilder
         */
        public GetZapRunsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set search
         * @param search Performs a text search against the &#x60;zap_title&#x60;, &#x60;data_in&#x60;, and &#x60;data_out&#x60; fields, returning only zap runs that match the specified keywords. (optional)
         * @return GetZapRunsRequestBuilder
         */
        public GetZapRunsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Accepts one or more status values separated by commas, enabling the filtering of zap runs based on the specified status or statuses provided. (optional)
         * @return GetZapRunsRequestBuilder
         */
        public GetZapRunsRequestBuilder statuses(String statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Build call for getZapRuns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getZapRunsCall(fromDate, toDate, zapId, limit, offset, search, statuses, _callback);
        }


        /**
         * Execute getZapRuns request
         * @return ExperimentalGetZapRunsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExperimentalGetZapRunsResponse execute() throws ApiException {
            ApiResponse<ExperimentalGetZapRunsResponse> localVarResp = getZapRunsWithHttpInfo(fromDate, toDate, zapId, limit, offset, search, statuses);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getZapRuns request with HTTP info returned
         * @return ApiResponse&lt;ExperimentalGetZapRunsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExperimentalGetZapRunsResponse> executeWithHttpInfo() throws ApiException {
            return getZapRunsWithHttpInfo(fromDate, toDate, zapId, limit, offset, search, statuses);
        }

        /**
         * Execute getZapRuns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExperimentalGetZapRunsResponse> _callback) throws ApiException {
            return getZapRunsAsync(fromDate, toDate, zapId, limit, offset, search, statuses, _callback);
        }
    }

    /**
     * Get Zap Runs
     * This endpoint is a first version tool that delivers basic yet essential details about their executed Zap runs. As an evolving interface, this first version serves foundational information about Zap runs.  _However, it&#39;s important to note that this is an initial implementation and the **response payload is not definitive**. Our aim is to continually iterate and enhance this API, refining its capabilities and data output, to progressively deliver more valuable and useful information in future versions._  This endpoint requires the &#x60;zap:runs&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.  Please note that since this is an experimental tool, if you&#39;re interested in gaining access, you must contact our support team.
     * @return GetZapRunsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetZapRunsRequestBuilder getZapRuns() throws IllegalArgumentException {
        return new GetZapRunsRequestBuilder();
    }
}
