/*
 * Zapier Embed API
 * The Zapier Embed API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@zapier.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActionsListAvailableActionsdefaultResponse;
import com.konfigthis.client.model.Zap;
import com.konfigthis.client.model.ZapsCreateZapRequest;
import com.konfigthis.client.model.ZapsCreateZapResponse;
import com.konfigthis.client.model.ZapsGetFilteredZapsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ZapsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZapsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ZapsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createZapCall(String expand, ZapsCreateZapRequest zapsCreateZapRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zapsCreateZapRequest;

        // create path and map variables
        String localVarPath = "/zaps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createZapValidateBeforeCall(String expand, ZapsCreateZapRequest zapsCreateZapRequest, final ApiCallback _callback) throws ApiException {
        return createZapCall(expand, zapsCreateZapRequest, _callback);

    }


    private ApiResponse<ZapsCreateZapResponse> createZapWithHttpInfo(String expand, ZapsCreateZapRequest zapsCreateZapRequest) throws ApiException {
        okhttp3.Call localVarCall = createZapValidateBeforeCall(expand, zapsCreateZapRequest, null);
        Type localVarReturnType = new TypeToken<ZapsCreateZapResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createZapAsync(String expand, ZapsCreateZapRequest zapsCreateZapRequest, final ApiCallback<ZapsCreateZapResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createZapValidateBeforeCall(expand, zapsCreateZapRequest, _callback);
        Type localVarReturnType = new TypeToken<ZapsCreateZapResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateZapRequestBuilder {
        private final Zap data;
        private String expand;

        private CreateZapRequestBuilder(Zap data) {
            this.data = data;
        }

        /**
         * Set expand
         * @param expand A comma separated list of Zap fields that should be expanded from ids to full objects in the response. If a field may not be expanded, its encoded form will be returned instead. (optional)
         * @return CreateZapRequestBuilder
         */
        public CreateZapRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for createZap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ZapsCreateZapRequest zapsCreateZapRequest = buildBodyParams();
            return createZapCall(expand, zapsCreateZapRequest, _callback);
        }

        private ZapsCreateZapRequest buildBodyParams() {
            ZapsCreateZapRequest zapsCreateZapRequest = new ZapsCreateZapRequest();
            zapsCreateZapRequest.data(this.data);
            return zapsCreateZapRequest;
        }

        /**
         * Execute createZap request
         * @return ZapsCreateZapResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ZapsCreateZapResponse execute() throws ApiException {
            ZapsCreateZapRequest zapsCreateZapRequest = buildBodyParams();
            ApiResponse<ZapsCreateZapResponse> localVarResp = createZapWithHttpInfo(expand, zapsCreateZapRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createZap request with HTTP info returned
         * @return ApiResponse&lt;ZapsCreateZapResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ZapsCreateZapResponse> executeWithHttpInfo() throws ApiException {
            ZapsCreateZapRequest zapsCreateZapRequest = buildBodyParams();
            return createZapWithHttpInfo(expand, zapsCreateZapRequest);
        }

        /**
         * Execute createZap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ZapsCreateZapResponse> _callback) throws ApiException {
            ZapsCreateZapRequest zapsCreateZapRequest = buildBodyParams();
            return createZapAsync(expand, zapsCreateZapRequest, _callback);
        }
    }

    /**
     * Create a Zap
     * This URL creates a new Zap based on a series of steps and a given title. &#x60;is_enabled&#x60; must be set to true when creating a new Zap.  This endpoint requires the &#x60;zap:write&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @return CreateZapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public CreateZapRequestBuilder createZap(Zap data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateZapRequestBuilder(data);
    }
    private okhttp3.Call getFilteredZapsCall(Integer limit, Integer offset, Map<String, String> inputs, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zaps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (inputs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inputs", inputs));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilteredZapsValidateBeforeCall(Integer limit, Integer offset, Map<String, String> inputs, String expand, final ApiCallback _callback) throws ApiException {
        return getFilteredZapsCall(limit, offset, inputs, expand, _callback);

    }


    private ApiResponse<ZapsGetFilteredZapsResponse> getFilteredZapsWithHttpInfo(Integer limit, Integer offset, Map<String, String> inputs, String expand) throws ApiException {
        okhttp3.Call localVarCall = getFilteredZapsValidateBeforeCall(limit, offset, inputs, expand, null);
        Type localVarReturnType = new TypeToken<ZapsGetFilteredZapsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFilteredZapsAsync(Integer limit, Integer offset, Map<String, String> inputs, String expand, final ApiCallback<ZapsGetFilteredZapsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilteredZapsValidateBeforeCall(limit, offset, inputs, expand, _callback);
        Type localVarReturnType = new TypeToken<ZapsGetFilteredZapsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFilteredZapsRequestBuilder {
        private Integer limit;
        private Integer offset;
        private Map<String, String> inputs;
        private String expand;

        private GetFilteredZapsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Used for paginating results. Specifies the amount of apps to return (optional)
         * @return GetFilteredZapsRequestBuilder
         */
        public GetFilteredZapsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for paginating results. Specifies the offset of the apps to return (optional)
         * @return GetFilteredZapsRequestBuilder
         */
        public GetFilteredZapsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set inputs
         * @param inputs You may pass inputs[KEY]&#x3D;VALUE1,VALUE2 to filter for Zaps that contain those settings. For example, if your OAuth app is Trello you may filter for Zaps that contain a certain Trello board using inputs[board]&#x3D;BOARD_ID — Keys are defined by your app on the developer platform. (optional)
         * @return GetFilteredZapsRequestBuilder
         */
        public GetFilteredZapsRequestBuilder inputs(Map<String, String> inputs) {
            this.inputs = inputs;
            return this;
        }
        
        /**
         * Set expand
         * @param expand A comma separated list of Zap fields that should be expanded from ids to full objects in the response. If a field may not be expanded, its encoded form will be returned instead. (optional)
         * @return GetFilteredZapsRequestBuilder
         */
        public GetFilteredZapsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getFilteredZaps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFilteredZapsCall(limit, offset, inputs, expand, _callback);
        }


        /**
         * Execute getFilteredZaps request
         * @return ZapsGetFilteredZapsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ZapsGetFilteredZapsResponse execute() throws ApiException {
            ApiResponse<ZapsGetFilteredZapsResponse> localVarResp = getFilteredZapsWithHttpInfo(limit, offset, inputs, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFilteredZaps request with HTTP info returned
         * @return ApiResponse&lt;ZapsGetFilteredZapsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ZapsGetFilteredZapsResponse> executeWithHttpInfo() throws ApiException {
            return getFilteredZapsWithHttpInfo(limit, offset, inputs, expand);
        }

        /**
         * Execute getFilteredZaps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ZapsGetFilteredZapsResponse> _callback) throws ApiException {
            return getFilteredZapsAsync(limit, offset, inputs, expand, _callback);
        }
    }

    /**
     * Get Zaps
     * This endpoint returns a list of Zaps for the authenticated Zapier user.  The &#x60;expand&#x60; array can be used to expand selected fields into full objects in the response.  Inputs with keys can also be passed to filter Zaps by certain criteria.  This endpoint requires the &#x60;zap&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @return GetFilteredZapsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public GetFilteredZapsRequestBuilder getFilteredZaps() throws IllegalArgumentException {
        return new GetFilteredZapsRequestBuilder();
    }
}
