/*
 * Zapier Embed API
 * The Zapier Embed API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@zapier.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActionsGetChoicesRequest;
import com.konfigthis.client.model.ActionsGetChoicesRequestData;
import com.konfigthis.client.model.ActionsGetChoicesResponse;
import com.konfigthis.client.model.ActionsGetInputFieldsRequest;
import com.konfigthis.client.model.ActionsGetInputFieldsResponse;
import com.konfigthis.client.model.ActionsGetOutputFieldsRequest;
import com.konfigthis.client.model.ActionsGetOutputFieldsResponse;
import com.konfigthis.client.model.ActionsListAvailableActionsResponse;
import com.konfigthis.client.model.ActionsListAvailableActionsdefaultResponse;
import com.konfigthis.client.model.ActionsTestActionExecution200Response;
import com.konfigthis.client.model.ActionsTestActionExecutionRequest;
import com.konfigthis.client.model.ActionsTestActionExecutionResponse;
import com.konfigthis.client.model.InputsWithAuthenticationId;
import com.konfigthis.client.model.InputsWithAuthenticationIdAndFetchLiveSamples;
import com.konfigthis.client.model.InputsWithAuthenticationIdNoPage;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ActionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ActionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getChoicesCall(String action, String input, String page, ActionsGetChoicesRequest actionsGetChoicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsGetChoicesRequest;

        // create path and map variables
        String localVarPath = "/actions/{action}/inputs/{input}/choices"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()))
            .replace("{" + "input" + "}", localVarApiClient.escapeString(input.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChoicesValidateBeforeCall(String action, String input, String page, ActionsGetChoicesRequest actionsGetChoicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling getChoices(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling getChoices(Async)");
        }

        return getChoicesCall(action, input, page, actionsGetChoicesRequest, _callback);

    }


    private ApiResponse<ActionsGetChoicesResponse> getChoicesWithHttpInfo(String action, String input, String page, ActionsGetChoicesRequest actionsGetChoicesRequest) throws ApiException {
        okhttp3.Call localVarCall = getChoicesValidateBeforeCall(action, input, page, actionsGetChoicesRequest, null);
        Type localVarReturnType = new TypeToken<ActionsGetChoicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChoicesAsync(String action, String input, String page, ActionsGetChoicesRequest actionsGetChoicesRequest, final ApiCallback<ActionsGetChoicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChoicesValidateBeforeCall(action, input, page, actionsGetChoicesRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsGetChoicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChoicesRequestBuilder {
        private final ActionsGetChoicesRequestData data;
        private final String action;
        private final String input;
        private String page;

        private GetChoicesRequestBuilder(ActionsGetChoicesRequestData data, String action, String input) {
            this.data = data;
            this.action = action;
            this.input = input;
        }

        /**
         * Set page
         * @param page The page of choices to return, defaults to the first (optional, default to 1)
         * @return GetChoicesRequestBuilder
         */
        public GetChoicesRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getChoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the requested Input Fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActionsGetChoicesRequest actionsGetChoicesRequest = buildBodyParams();
            return getChoicesCall(action, input, page, actionsGetChoicesRequest, _callback);
        }

        private ActionsGetChoicesRequest buildBodyParams() {
            ActionsGetChoicesRequest actionsGetChoicesRequest = new ActionsGetChoicesRequest();
            actionsGetChoicesRequest.data(this.data);
            return actionsGetChoicesRequest;
        }

        /**
         * Execute getChoices request
         * @return ActionsGetChoicesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the requested Input Fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ActionsGetChoicesResponse execute() throws ApiException {
            ActionsGetChoicesRequest actionsGetChoicesRequest = buildBodyParams();
            ApiResponse<ActionsGetChoicesResponse> localVarResp = getChoicesWithHttpInfo(action, input, page, actionsGetChoicesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChoices request with HTTP info returned
         * @return ApiResponse&lt;ActionsGetChoicesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the requested Input Fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ActionsGetChoicesResponse> executeWithHttpInfo() throws ApiException {
            ActionsGetChoicesRequest actionsGetChoicesRequest = buildBodyParams();
            return getChoicesWithHttpInfo(action, input, page, actionsGetChoicesRequest);
        }

        /**
         * Execute getChoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the requested Input Fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ActionsGetChoicesResponse> _callback) throws ApiException {
            ActionsGetChoicesRequest actionsGetChoicesRequest = buildBodyParams();
            return getChoicesAsync(action, input, page, actionsGetChoicesRequest, _callback);
        }
    }

    /**
     * Get Choices
     * Get the possible values for an Input Field that is marked as &#x60;SELECT&#x60;.  This endpoint requires the &#x60;zap&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @param action An Action ID, as provided by the &#x60;/actions&#x60; endpoint. (required)
     * @param input An Input Field ID, as provided by the &#x60;/inputs&#x60; endpoint. (required)
     * @return GetChoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response for getting the requested Input Fields. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public GetChoicesRequestBuilder getChoices(ActionsGetChoicesRequestData data, String action, String input) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        if (input == null) throw new IllegalArgumentException("\"input\" is required but got null");
            

        return new GetChoicesRequestBuilder(data, action, input);
    }
    private okhttp3.Call getInputFieldsCall(String action, ActionsGetInputFieldsRequest actionsGetInputFieldsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsGetInputFieldsRequest;

        // create path and map variables
        String localVarPath = "/actions/{action}/inputs"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInputFieldsValidateBeforeCall(String action, ActionsGetInputFieldsRequest actionsGetInputFieldsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling getInputFields(Async)");
        }

        return getInputFieldsCall(action, actionsGetInputFieldsRequest, _callback);

    }


    private ApiResponse<ActionsGetInputFieldsResponse> getInputFieldsWithHttpInfo(String action, ActionsGetInputFieldsRequest actionsGetInputFieldsRequest) throws ApiException {
        okhttp3.Call localVarCall = getInputFieldsValidateBeforeCall(action, actionsGetInputFieldsRequest, null);
        Type localVarReturnType = new TypeToken<ActionsGetInputFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInputFieldsAsync(String action, ActionsGetInputFieldsRequest actionsGetInputFieldsRequest, final ApiCallback<ActionsGetInputFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInputFieldsValidateBeforeCall(action, actionsGetInputFieldsRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsGetInputFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInputFieldsRequestBuilder {
        private final String action;
        private InputsWithAuthenticationId data;

        private GetInputFieldsRequestBuilder(String action) {
            this.action = action;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return GetInputFieldsRequestBuilder
         */
        public GetInputFieldsRequestBuilder data(InputsWithAuthenticationId data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for getInputFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the input fields for a particular Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActionsGetInputFieldsRequest actionsGetInputFieldsRequest = buildBodyParams();
            return getInputFieldsCall(action, actionsGetInputFieldsRequest, _callback);
        }

        private ActionsGetInputFieldsRequest buildBodyParams() {
            ActionsGetInputFieldsRequest actionsGetInputFieldsRequest = new ActionsGetInputFieldsRequest();
            actionsGetInputFieldsRequest.data(this.data);
            return actionsGetInputFieldsRequest;
        }

        /**
         * Execute getInputFields request
         * @return ActionsGetInputFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the input fields for a particular Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ActionsGetInputFieldsResponse execute() throws ApiException {
            ActionsGetInputFieldsRequest actionsGetInputFieldsRequest = buildBodyParams();
            ApiResponse<ActionsGetInputFieldsResponse> localVarResp = getInputFieldsWithHttpInfo(action, actionsGetInputFieldsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInputFields request with HTTP info returned
         * @return ApiResponse&lt;ActionsGetInputFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the input fields for a particular Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ActionsGetInputFieldsResponse> executeWithHttpInfo() throws ApiException {
            ActionsGetInputFieldsRequest actionsGetInputFieldsRequest = buildBodyParams();
            return getInputFieldsWithHttpInfo(action, actionsGetInputFieldsRequest);
        }

        /**
         * Execute getInputFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful response for getting the input fields for a particular Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ActionsGetInputFieldsResponse> _callback) throws ApiException {
            ActionsGetInputFieldsRequest actionsGetInputFieldsRequest = buildBodyParams();
            return getInputFieldsAsync(action, actionsGetInputFieldsRequest, _callback);
        }
    }

    /**
     * Get Input Fields
     * Get the Input Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the &#x60;zap:write&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @param action An Action ID, as provided by the &#x60;/actions&#x60; endpoint. (required)
     * @return GetInputFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response for getting the input fields for a particular Action. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public GetInputFieldsRequestBuilder getInputFields(String action) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        return new GetInputFieldsRequestBuilder(action);
    }
    private okhttp3.Call getOutputFieldsCall(String action, ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsGetOutputFieldsRequest;

        // create path and map variables
        String localVarPath = "/actions/{action}/outputs"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutputFieldsValidateBeforeCall(String action, ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling getOutputFields(Async)");
        }

        return getOutputFieldsCall(action, actionsGetOutputFieldsRequest, _callback);

    }


    private ApiResponse<ActionsGetOutputFieldsResponse> getOutputFieldsWithHttpInfo(String action, ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest) throws ApiException {
        okhttp3.Call localVarCall = getOutputFieldsValidateBeforeCall(action, actionsGetOutputFieldsRequest, null);
        Type localVarReturnType = new TypeToken<ActionsGetOutputFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOutputFieldsAsync(String action, ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest, final ApiCallback<ActionsGetOutputFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutputFieldsValidateBeforeCall(action, actionsGetOutputFieldsRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsGetOutputFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOutputFieldsRequestBuilder {
        private final String action;
        private InputsWithAuthenticationIdAndFetchLiveSamples data;

        private GetOutputFieldsRequestBuilder(String action) {
            this.action = action;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return GetOutputFieldsRequestBuilder
         */
        public GetOutputFieldsRequestBuilder data(InputsWithAuthenticationIdAndFetchLiveSamples data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for getOutputFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get the Output Fields for an Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest = buildBodyParams();
            return getOutputFieldsCall(action, actionsGetOutputFieldsRequest, _callback);
        }

        private ActionsGetOutputFieldsRequest buildBodyParams() {
            ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest = new ActionsGetOutputFieldsRequest();
            actionsGetOutputFieldsRequest.data(this.data);
            return actionsGetOutputFieldsRequest;
        }

        /**
         * Execute getOutputFields request
         * @return ActionsGetOutputFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get the Output Fields for an Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ActionsGetOutputFieldsResponse execute() throws ApiException {
            ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest = buildBodyParams();
            ApiResponse<ActionsGetOutputFieldsResponse> localVarResp = getOutputFieldsWithHttpInfo(action, actionsGetOutputFieldsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOutputFields request with HTTP info returned
         * @return ApiResponse&lt;ActionsGetOutputFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get the Output Fields for an Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ActionsGetOutputFieldsResponse> executeWithHttpInfo() throws ApiException {
            ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest = buildBodyParams();
            return getOutputFieldsWithHttpInfo(action, actionsGetOutputFieldsRequest);
        }

        /**
         * Execute getOutputFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get the Output Fields for an Action. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ActionsGetOutputFieldsResponse> _callback) throws ApiException {
            ActionsGetOutputFieldsRequest actionsGetOutputFieldsRequest = buildBodyParams();
            return getOutputFieldsAsync(action, actionsGetOutputFieldsRequest, _callback);
        }
    }

    /**
     * Get Output Fields
     * Get the Output Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the &#x60;zap:write&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min).
     * @param action An Action ID, as provided by the &#x60;/actions&#x60; endpoint. (required)
     * @return GetOutputFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request to get the Output Fields for an Action. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutputFieldsRequestBuilder getOutputFields(String action) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        return new GetOutputFieldsRequestBuilder(action);
    }
    private okhttp3.Call listAvailableActionsCall(UUID app, String actionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        if (actionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_type", actionType));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableActionsValidateBeforeCall(UUID app, String actionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling listAvailableActions(Async)");
        }

        // verify the required parameter 'actionType' is set
        if (actionType == null) {
            throw new ApiException("Missing the required parameter 'actionType' when calling listAvailableActions(Async)");
        }

        return listAvailableActionsCall(app, actionType, _callback);

    }


    private ApiResponse<ActionsListAvailableActionsResponse> listAvailableActionsWithHttpInfo(UUID app, String actionType) throws ApiException {
        okhttp3.Call localVarCall = listAvailableActionsValidateBeforeCall(app, actionType, null);
        Type localVarReturnType = new TypeToken<ActionsListAvailableActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableActionsAsync(UUID app, String actionType, final ApiCallback<ActionsListAvailableActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableActionsValidateBeforeCall(app, actionType, _callback);
        Type localVarReturnType = new TypeToken<ActionsListAvailableActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableActionsRequestBuilder {
        private final UUID app;
        private final String actionType;

        private ListAvailableActionsRequestBuilder(UUID app, String actionType) {
            this.app = app;
            this.actionType = actionType;
        }

        /**
         * Build call for listAvailableActions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A valid response for fetching available actions for the App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableActionsCall(app, actionType, _callback);
        }


        /**
         * Execute listAvailableActions request
         * @return ActionsListAvailableActionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A valid response for fetching available actions for the App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ActionsListAvailableActionsResponse execute() throws ApiException {
            ApiResponse<ActionsListAvailableActionsResponse> localVarResp = listAvailableActionsWithHttpInfo(app, actionType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableActions request with HTTP info returned
         * @return ApiResponse&lt;ActionsListAvailableActionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A valid response for fetching available actions for the App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ActionsListAvailableActionsResponse> executeWithHttpInfo() throws ApiException {
            return listAvailableActionsWithHttpInfo(app, actionType);
        }

        /**
         * Execute listAvailableActions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A valid response for fetching available actions for the App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ActionsListAvailableActionsResponse> _callback) throws ApiException {
            return listAvailableActionsAsync(app, actionType, _callback);
        }
    }

    /**
     * Get Actions
     * Fetch the available actions for the provided App. It&#39;s typical to filter by type so that only actions that make sense for a particular step are shown. For example only showing reads for the first step in a Zap.  This endpoint requires the &#x60;zap&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @param app A canonical App ID, as provided by the &#x60;/apps&#x60; endpoint. (required)
     * @param actionType The type of Action to filter for. (required)
     * @return ListAvailableActionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A valid response for fetching available actions for the App. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableActionsRequestBuilder listAvailableActions(UUID app, String actionType) throws IllegalArgumentException {
        if (app == null) throw new IllegalArgumentException("\"app\" is required but got null");
            

        if (actionType == null) throw new IllegalArgumentException("\"actionType\" is required but got null");
            

        return new ListAvailableActionsRequestBuilder(app, actionType);
    }
    private okhttp3.Call testActionExecutionCall(String action, ActionsTestActionExecutionRequest actionsTestActionExecutionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsTestActionExecutionRequest;

        // create path and map variables
        String localVarPath = "/actions/{action}/test"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testActionExecutionValidateBeforeCall(String action, ActionsTestActionExecutionRequest actionsTestActionExecutionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling testActionExecution(Async)");
        }

        return testActionExecutionCall(action, actionsTestActionExecutionRequest, _callback);

    }


    private ApiResponse<ActionsTestActionExecutionResponse> testActionExecutionWithHttpInfo(String action, ActionsTestActionExecutionRequest actionsTestActionExecutionRequest) throws ApiException {
        okhttp3.Call localVarCall = testActionExecutionValidateBeforeCall(action, actionsTestActionExecutionRequest, null);
        Type localVarReturnType = new TypeToken<ActionsTestActionExecutionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testActionExecutionAsync(String action, ActionsTestActionExecutionRequest actionsTestActionExecutionRequest, final ApiCallback<ActionsTestActionExecutionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testActionExecutionValidateBeforeCall(action, actionsTestActionExecutionRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsTestActionExecutionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TestActionExecutionRequestBuilder {
        private final String action;
        private InputsWithAuthenticationIdNoPage data;

        private TestActionExecutionRequestBuilder(String action) {
            this.action = action;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return TestActionExecutionRequestBuilder
         */
        public TestActionExecutionRequestBuilder data(InputsWithAuthenticationIdNoPage data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for testActionExecution
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActionsTestActionExecutionRequest actionsTestActionExecutionRequest = buildBodyParams();
            return testActionExecutionCall(action, actionsTestActionExecutionRequest, _callback);
        }

        private ActionsTestActionExecutionRequest buildBodyParams() {
            ActionsTestActionExecutionRequest actionsTestActionExecutionRequest = new ActionsTestActionExecutionRequest();
            actionsTestActionExecutionRequest.data(this.data);
            return actionsTestActionExecutionRequest;
        }

        /**
         * Execute testActionExecution request
         * @return ActionsTestActionExecutionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ActionsTestActionExecutionResponse execute() throws ApiException {
            ActionsTestActionExecutionRequest actionsTestActionExecutionRequest = buildBodyParams();
            ApiResponse<ActionsTestActionExecutionResponse> localVarResp = testActionExecutionWithHttpInfo(action, actionsTestActionExecutionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute testActionExecution request with HTTP info returned
         * @return ApiResponse&lt;ActionsTestActionExecutionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ActionsTestActionExecutionResponse> executeWithHttpInfo() throws ApiException {
            ActionsTestActionExecutionRequest actionsTestActionExecutionRequest = buildBodyParams();
            return testActionExecutionWithHttpInfo(action, actionsTestActionExecutionRequest);
        }

        /**
         * Execute testActionExecution request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ActionsTestActionExecutionResponse> _callback) throws ApiException {
            ActionsTestActionExecutionRequest actionsTestActionExecutionRequest = buildBodyParams();
            return testActionExecutionAsync(action, actionsTestActionExecutionRequest, _callback);
        }
    }

    /**
     * Test an action (step)
     * Tests the action (step) in the third party api, using the provided authentication and inputs. On a successful test returns 200 and the result of executing the action, otherwise it returns a 400 and details about the failure.  This endpoint requires the &#x60;zap:write&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min).
     * @param action An Action ID, as provided by the &#x60;/actions&#x60; endpoint. (required)
     * @return TestActionExecutionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestActionExecutionRequestBuilder testActionExecution(String action) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        return new TestActionExecutionRequestBuilder(action);
    }
}
