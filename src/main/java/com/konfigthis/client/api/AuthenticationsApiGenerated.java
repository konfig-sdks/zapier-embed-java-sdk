/*
 * Zapier Embed API
 * The Zapier Embed API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@zapier.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActionsListAvailableActionsdefaultResponse;
import com.konfigthis.client.model.AuthenticationsCreateNewAuthenticationRequest;
import com.konfigthis.client.model.AuthenticationsCreateNewAuthenticationRequestData;
import com.konfigthis.client.model.AuthenticationsCreateNewAuthenticationResponse;
import com.konfigthis.client.model.AuthenticationsGetAvailableResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAuthenticationCall(AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationsCreateNewAuthenticationRequest;

        // create path and map variables
        String localVarPath = "/authentications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAuthenticationValidateBeforeCall(AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationsCreateNewAuthenticationRequest' is set
        if (authenticationsCreateNewAuthenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationsCreateNewAuthenticationRequest' when calling createNewAuthentication(Async)");
        }

        return createNewAuthenticationCall(authenticationsCreateNewAuthenticationRequest, _callback);

    }


    private ApiResponse<AuthenticationsCreateNewAuthenticationResponse> createNewAuthenticationWithHttpInfo(AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewAuthenticationValidateBeforeCall(authenticationsCreateNewAuthenticationRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticationsCreateNewAuthenticationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAuthenticationAsync(AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest, final ApiCallback<AuthenticationsCreateNewAuthenticationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAuthenticationValidateBeforeCall(authenticationsCreateNewAuthenticationRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationsCreateNewAuthenticationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAuthenticationRequestBuilder {
        private AuthenticationsCreateNewAuthenticationRequestData data;

        private CreateNewAuthenticationRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewAuthenticationRequestBuilder
         */
        public CreateNewAuthenticationRequestBuilder data(AuthenticationsCreateNewAuthenticationRequestData data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for createNewAuthentication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response to create a new Authentication </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest = buildBodyParams();
            return createNewAuthenticationCall(authenticationsCreateNewAuthenticationRequest, _callback);
        }

        private AuthenticationsCreateNewAuthenticationRequest buildBodyParams() {
            AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest = new AuthenticationsCreateNewAuthenticationRequest();
            authenticationsCreateNewAuthenticationRequest.data(this.data);
            return authenticationsCreateNewAuthenticationRequest;
        }

        /**
         * Execute createNewAuthentication request
         * @return AuthenticationsCreateNewAuthenticationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response to create a new Authentication </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public AuthenticationsCreateNewAuthenticationResponse execute() throws ApiException {
            AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest = buildBodyParams();
            ApiResponse<AuthenticationsCreateNewAuthenticationResponse> localVarResp = createNewAuthenticationWithHttpInfo(authenticationsCreateNewAuthenticationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAuthentication request with HTTP info returned
         * @return ApiResponse&lt;AuthenticationsCreateNewAuthenticationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response to create a new Authentication </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthenticationsCreateNewAuthenticationResponse> executeWithHttpInfo() throws ApiException {
            AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest = buildBodyParams();
            return createNewAuthenticationWithHttpInfo(authenticationsCreateNewAuthenticationRequest);
        }

        /**
         * Execute createNewAuthentication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A successful response to create a new Authentication </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthenticationsCreateNewAuthenticationResponse> _callback) throws ApiException {
            AuthenticationsCreateNewAuthenticationRequest authenticationsCreateNewAuthenticationRequest = buildBodyParams();
            return createNewAuthenticationAsync(authenticationsCreateNewAuthenticationRequest, _callback);
        }
    }

    /**
     * Create Authentication
     * Creates a new Authentication for the provided App.  This endpoint requires the &#x60;authentication:write&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @param authenticationsCreateNewAuthenticationRequest Inputs to create a new Authentication (required)
     * @return CreateNewAuthenticationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response to create a new Authentication </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAuthenticationRequestBuilder createNewAuthentication() throws IllegalArgumentException {
        return new CreateNewAuthenticationRequestBuilder();
    }
    private okhttp3.Call getAvailableCall(UUID app, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableValidateBeforeCall(UUID app, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling getAvailable(Async)");
        }

        return getAvailableCall(app, limit, offset, _callback);

    }


    private ApiResponse<AuthenticationsGetAvailableResponse> getAvailableWithHttpInfo(UUID app, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAvailableValidateBeforeCall(app, limit, offset, null);
        Type localVarReturnType = new TypeToken<AuthenticationsGetAvailableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvailableAsync(UUID app, Integer limit, Integer offset, final ApiCallback<AuthenticationsGetAvailableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableValidateBeforeCall(app, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationsGetAvailableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvailableRequestBuilder {
        private final UUID app;
        private Integer limit;
        private Integer offset;

        private GetAvailableRequestBuilder(UUID app) {
            this.app = app;
        }

        /**
         * Set limit
         * @param limit Used for paginating results. Specifies the maximum number of items to return per page. If this value is not set, it defaults to 10. (optional, default to 10)
         * @return GetAvailableRequestBuilder
         */
        public GetAvailableRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Used for paginating results. Specifies the offset to use. (optional)
         * @return GetAvailableRequestBuilder
         */
        public GetAvailableRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAvailable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get available Authentications for the provided App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableCall(app, limit, offset, _callback);
        }


        /**
         * Execute getAvailable request
         * @return AuthenticationsGetAvailableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get available Authentications for the provided App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public AuthenticationsGetAvailableResponse execute() throws ApiException {
            ApiResponse<AuthenticationsGetAvailableResponse> localVarResp = getAvailableWithHttpInfo(app, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvailable request with HTTP info returned
         * @return ApiResponse&lt;AuthenticationsGetAvailableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get available Authentications for the provided App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthenticationsGetAvailableResponse> executeWithHttpInfo() throws ApiException {
            return getAvailableWithHttpInfo(app, limit, offset);
        }

        /**
         * Execute getAvailable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A successful request to get available Authentications for the provided App. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthenticationsGetAvailableResponse> _callback) throws ApiException {
            return getAvailableAsync(app, limit, offset, _callback);
        }
    }

    /**
     * Get Authentications
     * Fetch the available Authentications for the provided App. This will only return Authentications that are owned by the user and not those that are shared with them, since it&#39;&#39;s not possible to create Zaps with Authentications you don&#39;&#39;t own.  This endpoint requires the &#x60;authentication&#x60; OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @param app A canonical App ID, as provided by the &#x60;/apps&#x60; endpoint. (required)
     * @return GetAvailableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request to get available Authentications for the provided App. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error has occurred but details are available. </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableRequestBuilder getAvailable(UUID app) throws IllegalArgumentException {
        if (app == null) throw new IllegalArgumentException("\"app\" is required but got null");
            

        return new GetAvailableRequestBuilder(app);
    }
}
