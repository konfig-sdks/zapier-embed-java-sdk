/*
 * Zapier Embed API
 * The Zapier Embed API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@zapier.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ZapRunStep;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ZapRun
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ZapRun {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  /**
   * Represents the current state or progress of the Zap Run
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    DELAYED("delayed"),
    
    SCHEDULED("scheduled"),
    
    PENDING("pending"),
    
    ERROR("error"),
    
    HALTED("halted"),
    
    THROTTLED("throttled"),
    
    HELD("held"),
    
    FILTERED("filtered"),
    
    SKIPPED("skipped"),
    
    SUCCESS("success");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ZAP_TITLE = "zap_title";
  @SerializedName(SERIALIZED_NAME_ZAP_TITLE)
  private String zapTitle;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<ZapRunStep> steps = null;

  public static final String SERIALIZED_NAME_DATA_IN = "data_in";
  @SerializedName(SERIALIZED_NAME_DATA_IN)
  private String dataIn;

  public static final String SERIALIZED_NAME_DATA_OUT = "data_out";
  @SerializedName(SERIALIZED_NAME_DATA_OUT)
  private String dataOut;

  public ZapRun() {
  }

  
  public ZapRun(
     OffsetDateTime startTime, 
     OffsetDateTime endTime, 
     StatusEnum status, 
     String zapTitle
  ) {
    this();
    this.startTime = startTime;
    this.endTime = endTime;
    this.status = status;
    this.zapTitle = zapTitle;
  }

  public ZapRun id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Zap Run Identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00946041-b63b-a34c-9c30-630c32f0c3a4", value = "Zap Run Identifier.")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


   /**
   * The specific time when the Zap Run was initiated.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-12-01T06:29:10.360Z", value = "The specific time when the Zap Run was initiated.")

  public OffsetDateTime getStartTime() {
    return startTime;
  }




   /**
   * The specific time when the Zap Run was finished.
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-12-01T06:29:10.360Z", value = "The specific time when the Zap Run was finished.")

  public OffsetDateTime getEndTime() {
    return endTime;
  }




   /**
   * Represents the current state or progress of the Zap Run
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the current state or progress of the Zap Run")

  public StatusEnum getStatus() {
    return status;
  }




   /**
   * Refers to the name or title of the specific Zap that the run is associated with.
   * @return zapTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Zap Title - New Item", value = "Refers to the name or title of the specific Zap that the run is associated with.")

  public String getZapTitle() {
    return zapTitle;
  }




  public ZapRun steps(List<ZapRunStep> steps) {
    
    
    
    
    this.steps = steps;
    return this;
  }

  public ZapRun addStepsItem(ZapRunStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * The list of sequential actions or processes involved in the execution of the associated Zap run.
   * @return steps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of sequential actions or processes involved in the execution of the associated Zap run.")

  public List<ZapRunStep> getSteps() {
    return steps;
  }


  public void setSteps(List<ZapRunStep> steps) {
    
    
    
    this.steps = steps;
  }


  public ZapRun dataIn(String dataIn) {
    
    
    
    
    this.dataIn = dataIn;
    return this;
  }

   /**
   * The information about the data inputted into and logged out from a specific Zap Run during its execution.
   * @return dataIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The information about the data inputted into and logged out from a specific Zap Run during its execution.")

  public String getDataIn() {
    return dataIn;
  }


  public void setDataIn(String dataIn) {
    
    
    
    this.dataIn = dataIn;
  }


  public ZapRun dataOut(String dataOut) {
    
    
    
    
    this.dataOut = dataOut;
    return this;
  }

   /**
   * The information logged out from a specific Zap Run during its execution.
   * @return dataOut
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The information logged out from a specific Zap Run during its execution.")

  public String getDataOut() {
    return dataOut;
  }


  public void setDataOut(String dataOut) {
    
    
    
    this.dataOut = dataOut;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ZapRun instance itself
   */
  public ZapRun putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZapRun zapRun = (ZapRun) o;
    return Objects.equals(this.id, zapRun.id) &&
        Objects.equals(this.startTime, zapRun.startTime) &&
        Objects.equals(this.endTime, zapRun.endTime) &&
        Objects.equals(this.status, zapRun.status) &&
        Objects.equals(this.zapTitle, zapRun.zapTitle) &&
        Objects.equals(this.steps, zapRun.steps) &&
        Objects.equals(this.dataIn, zapRun.dataIn) &&
        Objects.equals(this.dataOut, zapRun.dataOut)&&
        Objects.equals(this.additionalProperties, zapRun.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, startTime, endTime, status, zapTitle, steps, dataIn, dataOut, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZapRun {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zapTitle: ").append(toIndentedString(zapTitle)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    dataIn: ").append(toIndentedString(dataIn)).append("\n");
    sb.append("    dataOut: ").append(toIndentedString(dataOut)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("start_time");
    openapiFields.add("end_time");
    openapiFields.add("status");
    openapiFields.add("zap_title");
    openapiFields.add("steps");
    openapiFields.add("data_in");
    openapiFields.add("data_out");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ZapRun
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ZapRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZapRun is not found in the empty JSON string", ZapRun.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("zap_title") != null && !jsonObj.get("zap_title").isJsonNull()) && !jsonObj.get("zap_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zap_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zap_title").toString()));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            ZapRunStep.validateJsonObject(jsonArraysteps.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("data_in") != null && !jsonObj.get("data_in").isJsonNull()) && !jsonObj.get("data_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_in").toString()));
      }
      if ((jsonObj.get("data_out") != null && !jsonObj.get("data_out").isJsonNull()) && !jsonObj.get("data_out").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_out` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_out").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZapRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZapRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZapRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZapRun.class));

       return (TypeAdapter<T>) new TypeAdapter<ZapRun>() {
           @Override
           public void write(JsonWriter out, ZapRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ZapRun read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ZapRun instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZapRun given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZapRun
  * @throws IOException if the JSON string is invalid with respect to ZapRun
  */
  public static ZapRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZapRun.class);
  }

 /**
  * Convert an instance of ZapRun to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

